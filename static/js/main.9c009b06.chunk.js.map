{"version":3,"sources":["Filter.js","Popular.js","Tvsection.js","Seasons.js","LogoSvg.js","Navigation.js","MovieSection.js","Domestic.js","App.js","serviceWorker.js","index.js"],"names":["Filter","url","this","props","movie","id","window","location","href","className","key","src","poster_src","alt","name","first_air_date","type","onClick","viewfilterMovie","bind","value","Component","Popular","state","filterSearch","filSearch","console","log","urlString","$","ajax","success","searchResults","results","fltSection","forEach","poster_path","moviefilRow","push","setState","rows","error","xhr","status","err","e","target","onChange","filtersearchChangeHandler","placeholder","Tvsection","tv","viewTV","Seasons","seasonTv","newSeries","tvRow","LogoSvg","width","version","xmlns","xmlnsxlink","x","y","viewBox","xml","fill","d","Navigation","to","exact","activeStyle","color","React","MovieSection","title","overview","viewMovie","Domestic","performSearch","searchTerm","movieSection","movieRow","searchChangeHandler","App","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAgCeA,EA9Bf,0LAEQ,IAAMC,EAAM,oCAAsCC,KAAKC,MAAMC,MAAMC,GACnEC,OAAOC,SAASC,KAAOP,IAH/B,+BAMQ,OACI,yBAAKQ,UAAU,iBAAiBC,IAAKR,KAAKC,MAAMC,MAAMC,IAClD,yBAAKI,UAAU,gBACX,yBAAKA,UAAU,kBACX,yBACIE,IAAKT,KAAKC,MAAMC,MAAMQ,WACtBC,IAAI,iBAGZ,yBAAKJ,UAAU,mBACX,yBAAKA,UAAU,qBAAqBP,KAAKC,MAAMC,MAAMU,MACrD,2BAAIZ,KAAKC,MAAMC,MAAMW,gBACrB,2BAAON,UAAU,eACbO,KAAK,SACLC,QAASf,KAAKgB,gBAAgBC,KAAKjB,MACnCkB,MAAM,gBArBlC,GAA4BC,aCgEbC,EA5Df,YACE,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KACDoB,MAAQ,GACb,EAAKC,aAAa,QAHD,EADrB,0EAOeC,GAAY,IAAD,OACtBC,QAAQC,IAAI,sCACZ,IAAMC,EACJ,yFACAH,EACFI,IAAEC,KAAK,CACL7B,IAAK2B,EACLG,QAAS,SAAAC,GACPN,QAAQC,IAAI,6BACZ,IAAMM,EAAUD,EAAcC,QAE1BC,EAAa,GAEjBD,EAAQE,SAAQ,SAAA/B,GACdA,EAAMQ,WACJ,kCAAoCR,EAAMgC,YAC5C,IAAMC,EAAc,kBAAC,EAAD,CAAQ3B,IAAKN,EAAMC,GAAID,MAAOA,IAClD8B,EAAWI,KAAKD,MAElB,EAAKE,SAAS,CAAEC,KAAMN,KAExBO,MAAO,SAACC,EAAKC,EAAQC,GACnBlB,QAAQe,MAAM,6BA7BtB,gDAkC4BI,GACxBnB,QAAQC,IAAIkB,EAAEC,OAAO1B,OACrB,IAAMK,EAAYoB,EAAEC,OAAO1B,MAC3BlB,KAAKsB,aAAaC,KArCtB,+BAyCI,OACE,6BACGvB,KAAKqB,QAAU,GACd,wBAAId,UAAU,aAAd,8BAEE,wBAAIA,UAAU,aAAd,sBAEJ,2BACEA,UAAU,cACVsC,SAAU7C,KAAK8C,0BAA0B7B,KAAKjB,MAC9C+C,YAAY,eACZjC,KAAK,SAENd,KAAKqB,MAAMiB,UAtDpB,GAA6BnB,aC4Bd6B,EAhCf,iLAEI,IAAMjD,EAAM,iCAAmCC,KAAKC,MAAMgD,GAAG9C,GAC7DC,OAAOC,SAASC,KAAOP,IAH3B,+BAOI,OACE,6BAASQ,UAAU,YAAYC,IAAKR,KAAKC,MAAMgD,GAAG9C,IAChD,yBAAKI,UAAU,eACb,yBAAKA,UAAU,cACb,yBAAKE,IAAKT,KAAKC,MAAMgD,GAAGvC,WAAYC,IAAI,iBAG1C,yBAAKJ,UAAU,kBACb,4BAAKP,KAAKC,MAAMgD,GAAGrC,MACnB,uBAAGL,UAAU,WAAb,kBACkBP,KAAKC,MAAMgD,GAAGpC,gBAEhC,2BACEN,UAAU,WACVO,KAAK,SACLC,QAASf,KAAKkD,OAAOjC,KAAKjB,MAC1BkB,MAAM,gBAvBpB,GAA+BC,aC8ChBgC,EA5Cf,YACI,WAAYlD,GAAQ,IAAD,8BACf,4CAAMA,KACDoB,MAAQ,GACb,EAAK+B,WAHU,EADvB,wEAQgB,IAAD,OAGPzB,IAAEC,KAAK,CACH7B,IAHW,8GAIX8B,QAAS,SAAAC,GACLN,QAAQC,IAAI,mCACZ,IAAMM,EAAUD,EAAcC,QAExBsB,EAAY,GAElBtB,EAAQE,SAAQ,SAAAgB,GACZA,EAAGvC,WACC,kCAAoCuC,EAAGf,YAC3C,IAAMoB,EAAQ,kBAAC,EAAD,CAAW9C,IAAKyC,EAAG9C,GAAI8C,GAAIA,IACzCI,EAAUjB,KAAKkB,MAEnB,EAAKjB,SAAS,CAAEC,KAAMe,KAE1Bd,MAAO,SAACC,EAAKC,EAAQC,GACjBlB,QAAQe,MAAM,6BA5B9B,+BAkCQ,OACI,6BACI,wBAAIhC,UAAU,aAAd,mBACCP,KAAKqB,MAAMiB,UArC5B,GAA6BnB,aC0BZoC,EA3BM,kBACnB,yBAAKhD,UAAU,WACbiD,MAAM,OACNC,QAAQ,MACRtD,GAAG,SACHuD,MAAM,6BACNC,WAAW,+BACXC,EAAE,MACFC,EAAE,MACFC,QAAQ,cACRC,IAAI,iBACJC,KAAK,SAEL,2BACE,2BACE,0BACEC,EAAE,+cCsBCC,E,iLAnCX,OACE,yBAAK3D,UAAU,aACb,yBAAKA,UAAU,cACb,yBAAKiD,MAAM,KAAK/C,IAAI,WAAWE,IAAI,gBAErC,6BACE,kBAAC,IAAD,CAASwD,GAAG,IAAIC,OAAK,EAACC,YAAa,CAAEC,MAAO,eAA5C,UAGA,kBAAC,IAAD,CAASF,OAAK,EAACC,YAAa,CAAEC,MAAO,cAAgBH,GAAG,YAAxD,YAGA,kBAAC,IAAD,CAASC,OAAK,EAACC,YAAa,CAAEC,MAAO,cAAgBH,GAAG,YAAxD,UAGA,kBAAC,IAAD,CACEC,OAAK,EACLC,YAAa,CAAEC,MAAO,cACtBH,GAAG,IACH5D,UAAU,gBAEV,kBAAC,EAAD,MACA,yBAAKA,UAAU,eACb,4BACE,qCACA,uD,GA3BSgE,IAAMpD,WCgChBqD,E,oLAhCX,IAAMzE,EAAM,oCAAsCC,KAAKC,MAAMC,MAAMC,GACnEC,OAAOC,SAASC,KAAOP,I,+BAGvB,OACE,6BAASQ,UAAU,gBAAgBC,IAAKR,KAAKC,MAAMC,MAAMC,IACvD,yBAAKI,UAAU,eACb,yBAAKA,UAAU,cACb,yBACEJ,GAAG,YACHM,IAAKT,KAAKC,MAAMC,MAAMQ,WACtBC,IAAI,iBAGR,yBAAKJ,UAAU,aACb,yBAAKA,UAAU,eAAeP,KAAKC,MAAMC,MAAMuE,OAC/C,uBAAGlE,UAAU,kBAAkBP,KAAKC,MAAMC,MAAMwE,UAChD,2BAAOnE,UAAU,WACfO,KAAK,SACLC,QAASf,KAAK2E,UAAU1D,KAAKjB,MAC7BkB,MAAM,SAER,2BAAOX,UAAU,WACfO,KAAK,SAASI,MAAM,gB,GAzBPqD,IAAMpD,WC2DlByD,EAxDf,YACE,WAAY3E,GAAQ,IAAD,8BACjB,4CAAMA,KACDoB,MAAQ,GACb,EAAKwD,cAAc,QAHF,EADrB,2EAOgBC,GAAa,IAAD,OACxBtD,QAAQC,IAAI,mDACZ,IAAMC,EACJ,4FACAoD,EACFnD,IAAEC,KAAK,CACL7B,IAAK2B,EACLG,QAAS,SAAAC,GACPN,QAAQC,IAAI,6BACZ,IAAMM,EAAUD,EAAcC,QAE1BgD,EAAe,GAEnBhD,EAAQE,SAAQ,SAAA/B,GACdA,EAAMQ,WACJ,kCAAoCR,EAAMgC,YAC5C,IAAM8C,EAAW,kBAAC,EAAD,CAAcxE,IAAKN,EAAMC,GAAID,MAAOA,IACrD6E,EAAa3C,KAAK4C,MAEpB,EAAK3C,SAAS,CAAEC,KAAMyC,KAExBxC,MAAO,SAACC,EAAKC,EAAQC,GACnBlB,QAAQe,MAAM,6BA7BtB,0CAkCsBI,GAClBnB,QAAQC,IAAIkB,EAAEC,OAAO1B,OACrB,IAAM4D,EAAanC,EAAEC,OAAO1B,MAC5BlB,KAAK6E,cAAcC,KArCvB,+BAyCI,OACE,6BACE,wBAAIvE,UAAU,aAAd,kBACA,2BACEA,UAAU,cACVsC,SAAU7C,KAAKiF,oBAAoBhE,KAAKjB,MACxC+C,YAAY,eACZjC,KAAK,SAENd,KAAKqB,MAAMiB,UAlDpB,GAA8BnB,aCkBf+D,E,iLAbX,OACE,kBAAC,IAAD,KACE,yBAAK3E,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAO6D,OAAK,EAACe,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOR,OAAK,EAACe,KAAK,WAAWC,UAAWhE,IACxC,kBAAC,IAAD,CAAO+D,KAAK,WAAWC,UAAWjC,U,GAR1BhC,aCIEkE,QACW,cAA7BjF,OAAOC,SAASiF,UAEe,UAA7BlF,OAAOC,SAASiF,UAEhBlF,OAAOC,SAASiF,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9c009b06.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Filter extends Component {\n    viewfilterMovie() {\n        const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id;\n        window.location.href = url;\n    }\n    render() {\n        return (\n            <div className=\"filter-wrapper\" key={this.props.movie.id}>\n                <div className=\"filter-shell\">\n                    <div className=\"filterimg-wrap\">\n                        <img\n                            src={this.props.movie.poster_src}\n                            alt=\"posterthumb\"\n                        />\n                    </div>\n                    <div className=\"filterinfo-wrap\">\n                        <div className=\"filtermovie-title\">{this.props.movie.name}</div>\n                        <p>{this.props.movie.first_air_date}</p>\n                        <input className=\"filter-input\"\n                            type=\"button\"\n                            onClick={this.viewfilterMovie.bind(this)}\n                            value=\"View\"\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Filter;\n","import React, { Component } from \"react\";\nimport $ from \"jquery\";\nimport \"./App.css\";\nimport Filter from \"./Filter\";\n\n\nexport class Popular extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.filterSearch(\"life\");\n  }\n\n  filterSearch(filSearch) {\n    console.log(\"Search results based on user input\");\n    const urlString =\n      \"https://api.themoviedb.org/3/search/tv?api_key=fad8316f1c015b67eddb9f2ce8419e6d&query=\" +\n      filSearch;\n    $.ajax({\n      url: urlString,\n      success: searchResults => {\n        console.log(\"Data fetched successfully\");\n        const results = searchResults.results;\n\n        var fltSection = [];\n\n        results.forEach(movie => {\n          movie.poster_src =\n            \"https://image.tmdb.org/t/p/w185\" + movie.poster_path;\n          const moviefilRow = <Filter key={movie.id} movie={movie} />;\n          fltSection.push(moviefilRow);\n        });\n        this.setState({ rows: fltSection });\n      },\n      error: (xhr, status, err) => {\n        console.error(\"Failed to fetch data\");\n      }\n    });\n  }\n\n  filtersearchChangeHandler(e) {\n    console.log(e.target.value);\n    const filSearch = e.target.value;\n    this.filterSearch(filSearch);\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state === {} ? (\n          <h1 className=\"hypertext\">popular movies loading....</h1>\n        ) : (\n            <h1 className=\"hypertext\">Release dates ....</h1>\n          )}\n        <input\n          className=\"searchInput\"\n          onChange={this.filtersearchChangeHandler.bind(this)}\n          placeholder=\"Search Movie\"\n          type=\"text\"\n        />\n        {this.state.rows}\n      </div>\n    );\n  }\n}\n\nexport default Popular;\n","import React, { Component } from \"react\";\n\nexport class Tvsection extends Component {\n  viewTV() {\n    const url = \"https://www.themoviedb.org/tv/\" + this.props.tv.id;\n    window.location.href = url;\n  }\n\n  render() {\n    return (\n      <section className=\"tvWrapper\" key={this.props.tv.id}>\n        <div className=\"series-cell\">\n          <div className=\"tv-imgwrap\">\n            <img src={this.props.tv.poster_src} alt=\"posterthumb\" />\n          </div>\n\n          <div className=\"series-details\">\n            <h4>{this.props.tv.name}</h4>\n            <p className=\"re-date\">\n              when released: {this.props.tv.first_air_date}\n            </p>\n            <input\n              className=\"buttonUp\"\n              type=\"button\"\n              onClick={this.viewTV.bind(this)}\n              value=\"View\"\n            />\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Tvsection;\n","import React, { Component } from 'react'\nimport $ from \"jquery\";\nimport Tvsection from './Tvsection';\n\nexport class Seasons extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.seasonTv();\n    }\n\n\n    seasonTv() {\n        const series = \"https://api.themoviedb.org/3/tv/airing_today?api_key=fad8316f1c015b67eddb9f2ce8419e6d&language=en-US&page=1\";\n        /*  console.log(series); */\n        $.ajax({\n            url: series,\n            success: searchResults => {\n                console.log(\"TV seasons fetched successfully\");\n                const results = searchResults.results;\n\n                const newSeries = [];\n\n                results.forEach(tv => {\n                    tv.poster_src =\n                        \"https://image.tmdb.org/t/p/w185\" + tv.poster_path;\n                    const tvRow = <Tvsection key={tv.id} tv={tv} />\n                    newSeries.push(tvRow);\n                });\n                this.setState({ rows: newSeries });\n            },\n            error: (xhr, status, err) => {\n                console.error(\"Failed to fetch data\");\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"hypertext\">Series and more</h1>\n                {this.state.rows}\n\n            </div>\n        )\n    }\n}\n\nexport default Seasons\n","import React from \"react\";\n\n\nexport const LogoSvg = () => (\n    <svg className=\"sign-drp\"\n      width=\"25px\"\n      version=\"1.1\"\n      id=\"Capa_1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlnsxlink=\"http://www.w3.org/1999/xlink\"\n      x=\"0px\"\n      y=\"0px\"\n      viewBox=\"0 0 512 512\"\n      xml=\"space=preserve\"\n      fill=\"white\"\n    >\n      <g>\n        <g>\n          <path\n            d=\"M437.02,330.98c-27.883-27.882-61.071-48.523-97.281-61.018C378.521,243.251,404,198.548,404,148\n              C404,66.393,337.607,0,256,0S108,66.393,108,148c0,50.548,25.479,95.251,64.262,121.962\n              c-36.21,12.495-69.398,33.136-97.281,61.018C26.629,379.333,0,443.62,0,512h40c0-119.103,96.897-216,216-216s216,96.897,216,216\n              h40C512,443.62,485.371,379.333,437.02,330.98z M256,256c-59.551,0-108-48.448-108-108S196.449,40,256,40\n              c59.551,0,108,48.448,108,108S315.551,256,256,256z\"\n          />\n        </g>\n      </g>\n    </svg>\n  );\n\n  export default LogoSvg;","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport LogSvg from \"./LogoSvg\";\n\nclass Navigation extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"image-cell\">\n          <img width=\"80\" src=\"logo.svg\" alt=\"movie icon\" />\n        </div>\n        <nav>\n          <NavLink to=\"/\" exact activeStyle={{ color: \"lightgreen\" }}>\n            Search\n          </NavLink>\n          <NavLink exact activeStyle={{ color: \"lightgreen\" }} to=\"/popular\">\n            Released\n          </NavLink>\n          <NavLink exact activeStyle={{ color: \"lightgreen\" }} to=\"/tvshows\">\n            Series\n          </NavLink>\n          <NavLink\n            exact\n            activeStyle={{ color: \"lightgreen\" }}\n            to=\"/\"\n            className=\"sign-toggler\"\n          >\n            <LogSvg />\n            <div className=\"drpdwn-info\">\n              <ul>\n                <li>Admin</li>\n                <li>Create account</li>\n              </ul>\n            </div>\n          </NavLink>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default Navigation;\n","import React from \"react\";\n\nclass MovieSection extends React.Component {\n  viewMovie() {\n    const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id;\n    window.location.href = url;\n  }\n  render() {\n    return (\n      <section className=\"posterWrapper\" key={this.props.movie.id}>\n        <div className=\"movie-shell\">\n          <div className=\"image-wrap\">\n            <img\n              id=\"posterImg\"\n              src={this.props.movie.poster_src}\n              alt=\"posterthumb\"\n            />\n          </div>\n          <div className=\"info-wrap\">\n            <div className=\"movie-title\">{this.props.movie.title}</div>\n            <p className=\"movie-overview\">{this.props.movie.overview}</p>\n            <input className=\"buttonUp\"\n              type=\"button\"\n              onClick={this.viewMovie.bind(this)}\n              value=\"View\"\n            />\n            <input className=\"buttonUp\"\n              type=\"button\" value=\"play\"\n            />\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default MovieSection;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport MovieSection from \"./MovieSection\";\nimport $ from \"jquery\";\n\nexport class Domestic extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.performSearch(\"rush\");\n  }\n\n  performSearch(searchTerm) {\n    console.log(\"Search results will be based on the moviedb url\");\n    const urlString =\n      \"https://api.themoviedb.org/3/search/movie?api_key=fad8316f1c015b67eddb9f2ce8419e6d&query=\" +\n      searchTerm;\n    $.ajax({\n      url: urlString,\n      success: searchResults => {\n        console.log(\"Data fetched successfully\");\n        const results = searchResults.results;\n\n        var movieSection = [];\n\n        results.forEach(movie => {\n          movie.poster_src =\n            \"https://image.tmdb.org/t/p/w185\" + movie.poster_path;\n          const movieRow = <MovieSection key={movie.id} movie={movie} />;\n          movieSection.push(movieRow);\n        });\n        this.setState({ rows: movieSection });\n      },\n      error: (xhr, status, err) => {\n        console.error(\"Failed to fetch data\");\n      }\n    });\n  }\n\n  searchChangeHandler(e) {\n    console.log(e.target.value);\n    const searchTerm = e.target.value;\n    this.performSearch(searchTerm);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"hypertext\">Home of Movies</h1>\n        <input\n          className=\"searchInput\"\n          onChange={this.searchChangeHandler.bind(this)}\n          placeholder=\"Search Movie\"\n          type=\"text\"\n        />\n        {this.state.rows}\n      </div>\n    );\n  }\n}\n\nexport default Domestic;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Popular from \"./Popular\";\nimport Seasons from \"./Seasons\";\nimport Navigation from \"./Navigation\";\nimport Domestic from \"./Domestic\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navigation />\n          <Route exact path=\"/\" component={Domestic} />\n          <Route exact path=\"/popular\" component={Popular} />\n          <Route path=\"/tvshows\" component={Seasons} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}